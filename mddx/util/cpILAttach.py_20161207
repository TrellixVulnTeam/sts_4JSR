# Test pyodbc connection. Result is 42.
# Note parameters in connection string, <PARAMETER>.

import pyodbc
import sys
import os
import os.path
import re
import string
import boto3
import zipfile
from botocore.exceptions import ClientError
import botocore.session
import binascii

string_types = str
conn = pyodbc.connect('DRIVER=FreeTDS;SERVER=DBHost;PORT=1433;DATABASE=MDDXIT;UID=sa;PWD=aiHwZ2!Qp2Xf;TDS_Version=8.0;', autocommit=True)
resource = boto3.resource('s3')
bucket = resource.Bucket('iqctest')
client = boto3.client('s3', 'us-west-2')
exist = True
AttachPath = '/attachments/'
#    print(bucket.name)

with conn:

     cursor = conn.cursor()
     while True:
	cursor.execute("select CaseId from dbo.[PendingTransferQue] where IsAttachmentTransferred is NULL or IsAttachmentTransferred = 0")

	row = cursor.fetchone()
        print row
        if row is not None:
		Case = row[0]
                print Case
		cursor.execute("select c.CopyToCl, c.CustomFieldID, cf.FileServerName From dbo.[CaseFileUpload] cf join dbo.[CustomField] c on cf.CustomFieldID = c.CustomFieldID where cf.CaseID = '%d' and cf.CaseType = 'UploadItf' and cf.FileServerName is not NULL and c.CopyToCl = 1" %(Case))
   		rows = cursor.fetchall()
                print rows, row, Case
		cursor.execute("UPDATE dbo.[PendingTransferQue] SET IsAttachmentTransferred = 1 where CaseId = '%d'" %(Case))
                while True:
	      	        if rows == []:
				break
			cursor.execute("select DownloaderBucket from  CaseFileNamesInBucket where caseid = '%d' " % (Case))
			attachBucket = cursor.fetchone()[0]
                        print attachBucket
			if attachBucket is None:
				break
				cursor.execute("UPDATE dbo.[PendingTransferQue] SET IsAttachmentTransferred = 1 where CaseId = '%d'" %(Case))
			attachZip = string.replace(str(attachBucket), '.zip', '_attachment.zip')
			print attachBucket, attachZip
			srcZipFile = str(Case) + '.zip'
			dstZip = str(Case) + '.zip'
			cursor.execute("select a.AccountName from CaseDetailsByfnFarthestFields cf join [Account] a on cf.AccountID = a.AccountID where cf.Case_Id = '%d' " % (Case))
			AccountName = cursor.fetchone()[0]
                        cursor.execute("select cf.Trial_id from CaseDetailsByfnFarthestFields cf join [Account] a on cf.AccountID = a.AccountID where cf.Case_Id = '%d' " % (Case))
			CaseID = cursor.fetchone()[0]
	                srcZipPath = os.path.join('/tmp/', str(attachBucket))
	                mergeFile = os.path.join('/tmp/', str(attachZip))
                        print AccountName, CaseID
	                #srcCase = os.path.join('autopxfolder/', str(AccountName), '/', str(CaseID), '/', str(attachBucket))
	                srcCase = 'autopxfolder/' + str(AccountName) + '/' + str(CaseID) + '/' + str(attachBucket)
	                print rows, srcZipPath, srcZipFile, srcCase
			print 'iqctest', srcCase, srcZipPath
			client.download_file('iqctest', srcCase, mergeFile)
			if os.path.isfile(srcZipPath):
				z = zipfile.ZipFile(mergeFile, "w")
				#z.write(srcZipPath)
				z.printdir()
				z.close()

	   		for row in rows:
				srcZipFile = zipfile.ZipFile(mergeFile,"a")
				#srcZipFile = zipfile.ZipFile("mergeFile","a",zipfile.ZIP_DEFLATED)
	      			src = '/attachments/' + row.FileServerName
				if not os.path.isfile(src):
					print("ERROR: %s Does not exist in UploadedFiles, even though it's in the database." % (src))
	           			continue
#        assert os.path.isfile(src), "source_file(%s) does not exist." % (src)
		        	dst = 'uiqcfolder' + src
				print mergeFile
				if os.path.isfile(mergeFile):
					srcZipFile = zipfile.ZipFile(mergeFile,"a",allowZip64=True)
					print src, dst, srcZipPath, srcZipFile, Case, row.FileServerName
					srcZipFile.write(src,row.FileServerName)
					srcZipFile.close()
	        		try:
					client.upload_file(src, 'iqctest', dst)
				except ClientError as ce:
					print(ce.response)
					print(ce.response['Error']['Code'])
					if ce.response['Error']['Code'] == "NoSuchKey":
						exist = False
						print("ERROR: %s Does not exist in S3, even though it's in the database." % (src))
		                       		continue	
               				else:
               					raise ce
      #if 'exist' == "True":
			if os.path.isfile(mergeFile):
				#zip.write(srcZipPath)
				#zip.close()
				#print isinstance(srcZipPath, basestring)
				dstAttachZip = 'autopxfolder/' + str(AccountName) + '/' + str(CaseID) + '/' + attachZip                                
                                print dstAttachZip
				client.upload_file(mergeFile, 'iqctest', dstAttachZip)
		#zip = zipfile.ZipFile(srcZipPath)
		#zip.printdir()
			break
		cursor.execute("UPDATE dbo.[PendingTransferQue] SET IsAttachmentTransferred = 1 where CaseId = '%d'" %(Case))
	if row is None:
		break
conn.close()
#                cursor.execute("UPDATE dbo.[CustomFieldAttachmentToBeTransfered] SET IsTransfered = 'false' where FileName = '%s'" %(row.FileName))
      #s3.Object(src).delete()
